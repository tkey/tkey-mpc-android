plugins {
    id 'com.android.library'
    id 'maven-publish'
}

apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.7'
}

android {
    compileSdk 33

    defaultConfig {
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments useTestStorageService: 'true'
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
        ndk {
            abiFilters 'arm64-v8a', 'x86_64', 'x86', 'armeabi-v7a'
        }
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path file('src/main/cpp/CMakeLists.txt')
            version '3.18.1'
        }
    }
}
dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.jacoco:org.jacoco.agent:0.8.7'
    testImplementation 'org.jacoco:org.jacoco.report:0.8.7'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    implementation 'com.github.grvgoel81:fetch-node-details-java:3.0.8'
    implementation 'com.github.grvgoel81:torus-utils-java:5.0.0'
    implementation 'com.auth0:java-jwt:3.19.2'
}

task javadoc(type: Javadoc) {
    failOnError(false)
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })

    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
        }
    }
}